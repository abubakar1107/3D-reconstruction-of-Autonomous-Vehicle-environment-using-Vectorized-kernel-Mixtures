(cmsc733_env) gayatrid@Gayatri:~/courses/cmsc733/projects/final_project/VecKM$ /home/gayatrid/miniconda3/envs/cmsc733_env/bin/python /home/gayatrid/courses/cmsc733/projects/final_project/VecKM/main.py
NormalEstimator(
  (feat_trans1): ComplexConv1d(
    (conv_r): Conv1d(1024, 512, kernel_size=(1,), stride=(1,))
    (conv_i): Conv1d(1024, 512, kernel_size=(1,), stride=(1,))
  )
  (feat_trans2): ComplexConv1d(
    (conv_r): Conv1d(512, 256, kernel_size=(1,), stride=(1,))
    (conv_i): Conv1d(512, 256, kernel_size=(1,), stride=(1,))
  )
  (feat_bn1): NaiveComplexBatchNorm1d(
    (bn_r): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (bn_i): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (feat_bn2): NaiveComplexBatchNorm1d(
    (bn_r): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (bn_i): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (out_fc): Sequential(
    (0): Linear(in_features=256, out_features=128, bias=True)
    (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
    (3): Linear(in_features=128, out_features=3, bias=True)
  )
  (relu): ComplexReLU()
)
^C^Z
[1]+  Stopped                 /home/gayatrid/miniconda3/envs/cmsc733_env/bin/python /home/gayatrid/courses/cmsc733/projects/final_project/VecKM/main.py
(cmsc733_env) gayatrid@Gayatri:~/courses/cmsc733/projects/final_project/VecKM$ /home/gayatrid/miniconda3/envs/cmsc733_env/bin/python /home/gayatrid/courses/cmsc733/projects/final_project/VecKM/main.py
alpha_list: [60, 90, 120]; beta_list: [10, 20]; d: 1024
NormalEstimator(
  (feat_trans1): ComplexConv1d(
    (conv_r): Conv1d(1024, 512, kernel_size=(1,), stride=(1,))
    (conv_i): Conv1d(1024, 512, kernel_size=(1,), stride=(1,))
  )
  (feat_trans2): ComplexConv1d(
    (conv_r): Conv1d(512, 256, kernel_size=(1,), stride=(1,))
    (conv_i): Conv1d(512, 256, kernel_size=(1,), stride=(1,))
  )
  (feat_bn1): NaiveComplexBatchNorm1d(
    (bn_r): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (bn_i): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (feat_bn2): NaiveComplexBatchNorm1d(
    (bn_r): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (bn_i): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (out_fc): Sequential(
    (0): Linear(in_features=256, out_features=128, bias=True)
    (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
    (3): Linear(in_features=128, out_features=3, bias=True)
  )
  (relu): ComplexReLU()
)
Traceback (most recent call last):
  File "/home/gayatrid/courses/cmsc733/projects/final_project/VecKM/main.py", line 68, in <module>
    pred_normal, gt_normal = model(pts, normal)
                             ^^^^^^^^^^^^^^^^^^
  File "/home/gayatrid/miniconda3/envs/cmsc733_env/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/gayatrid/miniconda3/envs/cmsc733_env/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/gayatrid/courses/cmsc733/projects/final_project/VecKM/VecKM.py", line 101, in forward
    G = G / torch.norm(G, dim=-1, keepdim=True) * self.sqrt_d               # (n_scales, n_reso, n, d)
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 4.58 GiB. GPU 0 has a total capacity of 8.00 GiB of which 0 bytes is free. Process 3349 has 17179869184.00 GiB memory in use. Including non-PyTorch memory, this process has 17179869184.00 GiB memory in use. Of the allocated memory 13.01 GiB is allocated by PyTorch, and 6.86 GiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)